(()=>{"use strict";var e={form:".popup__form",input:".popup__input",inputInvalidClass:"error_invalid",submitButton:".popup__save",inactiveButtonClass:"popup__save_invalid"};function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n=function(){function e(t,n,r,o,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._data=t,this._title=t.name,this._link=t.link,this._likes=t.likes,this._likeQuantity=t.likes.length,this._id=t._id,this._ownerId=t.owner._id,this._selfId=o,this._cardSelector=n,this._handleCardClick=r,this._handleDeleteButton=i}var n,r;return n=e,(r=[{key:"cardId",value:function(){return this._id}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".element__delete-button").addEventListener("click",(function(){return e._handleDeleteButton()})),this._element.querySelector(".element__like-button").addEventListener("click",(function(){return e._handleLikeCard()})),this._element.querySelector(".element__cover").addEventListener("click",(function(){return e._handleCardClick({title:e._title,link:e._link})}))}},{key:"renderCard",value:function(){this._element=this._getTemplate();var e=this._element.querySelector(".element__cover"),t=this._element.querySelector(".element__title"),n=this._element.querySelector(".element__like-button_quantity"),r=this._element.querySelector(".element__delete-button");return e.src=this._link,t.textContent=this._title,e.alt=this._title,this._ownerId!==this._selfId&&(r.style.display="none"),this._likes&&(n.textContent=this._likeQuantity),this._setEventListeners(),this._element}},{key:"setLikes",value:function(){cardLikes.textContent=this._likeQuantity}},{key:"handleDeleteCard",value:function(){this._element.remove(),this._element=null}},{key:"_handleLikeCard",value:function(){this._element.querySelector(".element__like-button").classList.toggle("element__like-button_active"),console.log(this._selfId)}}])&&t(n.prototype,r),e}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"_isValid",(function(e){var t=r._form.querySelector("#".concat(e.name,"-error"));!e.validity.valid||e.validity.typeMismatch?(t.textContent=e.validationMessage,t.classList.add(r._inputInvalidClass)):(t.textContent=e.validationMessage,t.classList.remove(r._inputInvalidClass))})),o(this,"_setEventListeners",(function(){r._formInputs.forEach((function(e){e.addEventListener("input",(function(){r._isValid(e),r.setSubmitButtonState()}))}))})),o(this,"enableValidation",(function(){r._setEventListeners(),r._form.addEventListener("submit",(function(e){e.preventDefault()}))})),this._form=n,this._formInputs=Array.from(this._form.querySelectorAll(t.input)),this._input=t.input,this._inputInvalidClass=t.inputInvalidClass,this._submitButton=this._form.querySelector(t.submitButton),this._inactiveButtonClass=t.inactiveButtonClass}var t,n;return t=e,(n=[{key:"setSubmitButtonState",value:function(){this._form.checkValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.removeAttribute("disabled")):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.setAttribute("disabled","disabled"))}},{key:"resetError",value:function(){var e=this;this._formInputs.forEach((function(t){var n=e._form.querySelector("#".concat(t.name,"-error"));n.textContent="",n.classList.remove(e._inputInvalidClass)})),this.setSubmitButtonState()}}])&&r(t.prototype,n),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t,this._container=n}var t,n;return t=e,(n=[{key:"addCard",value:function(e){this._container.append(e)}},{key:"addCustomCard",value:function(e){this._container.prepend(e)}},{key:"addInitialCards",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}])&&u(t.prototype,n),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=t,this._closeEscPopup=this._closeEscPopup.bind(this),this._closeOverlayClick=this._closeOverlayClick.bind(this),this._popupButtonClose=this._popup.querySelector(".popup__close")}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._closeEscPopup),this._popup.addEventListener("mousedown",this._closeOverlayClick)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._closeEscPopup),this._popup.removeEventListener("mousedown",this._closeOverlayClick)}},{key:"_handleCloseButton",value:function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&this.close()}},{key:"_closeEscPopup",value:function(e){"Escape"===e.key&&this.close()}},{key:"_closeOverlayClick",value:function(e){e.target===e.currentTarget&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupButtonClose.addEventListener("click",(function(t){return e._handleCloseButton(t)}))}}])&&c(t.prototype,n),e}();function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e,t,n){return(p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=_(r);if(o){var n=_(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return d(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._link=t._popup.querySelector(".popup__image"),t._title=t._popup.querySelector(".popup__subtitle"),t}return t=u,(n=[{key:"open",value:function(e){this._link.src=e.link,this._link.alt=e.title,this._title.textContent=e.title,p(_(u.prototype),"open",this).call(this)}}])&&f(t.prototype,n),u}(s);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,t,n){return(b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function k(e,t){return(k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function S(e){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&k(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return g(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._popupForm=n._popup.querySelector(".popup__form"),n._formSubmit=t,n}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputs=Array.from(this._popupForm.querySelectorAll(".popup__input")),this._inputValues={},this._inputs.forEach((function(t){return e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;b(S(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e._formSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){b(S(u.prototype),"close",this).call(this),this._popupForm.reset()}}])&&m(t.prototype,n),u}(s);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n,r,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t,this._about=n,this._avatar=r,this._id=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent,avatar:this._avatar,id:this._id}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about,this._avatar.src=e.avatar,this._id=e._id}}])&&C(t.prototype,n),e}();function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_handleResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getProfile",value:function(){var e=this;return fetch("".concat(this._baseUrl,"users/me"),{headers:this._headers}).then((function(t){return e._handleResponse(t)}))}},{key:"setAvatar",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"cards"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((function(e){return t._handleResponse(e)}))}},{key:"updateProfile",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then((function(e){return t._handleResponse(e)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._baseUrl,"cards"),{headers:this._headers}).then((function(t){return e._handleResponse(t)}))}},{key:"addCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){return t._handleResponse(e)}))}},{key:"getData",value:function(){return Promise.all([this.getProfile(),this.getInitialCards()])}},{key:"addLike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return t._handleResponse(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._handleResponse(e)}))}}])&&E(t.prototype,n),e}();function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t,n){return(q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=I(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function R(e,t){return(R=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e,t){return!t||"object"!==L(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&R(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=I(r);if(o){var n=I(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return B(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._form=t._popup.querySelector(".popup__form"),t._formSubmit=t._popup.querySelector(".popup__save"),t}return t=u,(n=[{key:"setNewHandler",value:function(e){this._handleFormSubmit=e}},{key:"setEventListeners",value:function(){var e=this;q(I(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit()}))}},{key:"setButtonText",value:function(e){this._confirmButton.textContent=e?"Удаление...":"Да"}}])&&j(t.prototype,n),u}(s),x=document.querySelector(".profile__edit-button"),U=document.querySelector(".profile-popup"),A=document.querySelector(".profile"),D=U.querySelector(".popup__form"),V=A.querySelector(".profile__name"),F=U.querySelector(".popup__input_field_name"),N=A.querySelector(".profile__description"),H=U.querySelector(".popup__input_field_description"),M=A.querySelector(".profile__add-card"),J=A.querySelector(".profile__avatar"),Q=document.querySelector(".card-popup"),z=document.querySelector(".elements"),$=Q.querySelector(".popup__form"),G=document.querySelector(".image-popup"),K=document.querySelector(".delete-popup");function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var X=new i(e,D);X.enableValidation();var Y=new w(U,(function(e){ae.updateProfile(e),Z.setUserInfo(e)}));Y.setEventListeners();var Z=new O(V,N,J,null),ee=new y(G);function te(e,t){ee.open(e,t)}function ne(e){var t=new n(e,".card-template",te,Z.getUserInfo().id,(function(){return function(e){oe.open(),oe.setNewHandler((function(){oe.setButtonText(!0),ae.deleteCard(e.cardId()).then((function(){e.handleDeleteCard(),oe.close()})).catch((function(e){return console.log(e)})).finally((function(){oe.setButtonText(!1)}))}))}(t)}),(function(){return handleLikeClick(t,e)}));return t.renderCard()}ee.setEventListeners();var re=new a((function(e){re.addCard(ne(e))}),z),oe=new T(K);oe.setEventListeners();var ie=new i(e,$);ie.enableValidation();var ue=new w(Q,(function(e){ae.addCard(e).then((function(e){re.addCustomCard(ne(e))})).catch((function(e){return console.log("Ошибка, рвать её мать!"+e.toString())}))}));ue.setEventListeners();var ae=new P({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-27/",headers:{authorization:"26c8d168-5e2f-4321-b420-05dcb41e9965","Content-Type":"application/json"}});ae.getData().then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,a=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){a=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(a)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];Z.setUserInfo(o),re.addInitialCards(i)})).then().catch((function(e){return console.log("Ошибка, рвать её мать!"+e.toString())})),x.addEventListener("click",(function(){Y.open(),X.resetError();var e=Z.getUserInfo();F.value=e.name,H.value=e.about})),M.addEventListener("click",(function(){ue.open(),ie.resetError()})),fetch("https://mesto.nomoreparties.co/v1/cohort-27/cards",{headers:{authorization:"26c8d168-5e2f-4321-b420-05dcb41e9965"}}).then((function(e){return e.json()})).then((function(e){console.log(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,